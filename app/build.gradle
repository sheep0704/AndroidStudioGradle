apply plugin: 'com.android.application'


android {



    compileSdkVersion 28
    buildToolsVersion "29.0.0"
    defaultConfig {
        applicationId "com.example.myapplication"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.8"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    //编译时的debug和release版本
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            debuggable true
        }
        /**
         * The `initWith` property allows you to copy configurations from other build types,
         * then configure only the settings you want to change. This one copies the debug build
         * type, and then changes the manifest placeholder and application ID.
         */
        staging {
            initWith debug
            manifestPlaceholders = [hostName:"internal.example.com"]
            applicationIdSuffix ".debugStaging"
        }

        custom {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
        }

        sourceSets {
            main {
                jni.srcDirs = []
            }
        }
    }

   signingConfigs {
        release {
            storeFile file('..') //绝对路径
            storePassword "12345678"
            keyAlias "alias"
            keyPassword "12345678"
        }
    }

    //增加了任务的标记  --》风味-尺寸 风味维度
    flavorDimensions "api","version"
    //  // Assigns this product flavor to the "version" flavor dimension.

    //merger-full/demo-声明了api的
    //merger-"version"-"api"
    productFlavors{
        tencent{
            dimension "api"
            applicationId "com.domin.armn"
            versionCode 1
            versionName "1.2.0"
            //常量,传入的值分别代表type,name,value;
            // buildConfigField "String", "PROJECT_SIGN", "\"jkxt\""

            manifestPlaceholders = [app_name: "tencent"]
        }

        baidu{
            //resValue的定义自动生成资源。
           // resValue "string", "app_name", "日本料理"
            dimension "api"
            applicationId "com.domin.armn"
            versionCode 1
            versionName "1.2.0"
            //${icon}
            manifestPlaceholders = [app_name: "baidu",icon:"@mipmap/fgcq",
            app_icon:"@mipmap/fgcq"]
          /*
            // 动态添加 string.xml 字段；
            // 注意，如果在这添加，在 string.xml 不能有这个字段，会重名！！！这里使用资源文件覆盖的方式来处理应用名称
//            resValue "string", "app_name", "沙嗲王會員x"
            resValue "bool", "auto_updates", 'false'
            // 动态修改 常量 字段
            buildConfigField "String", "MAIN_H5_URL", '"https://xxxxxxx22/index.html"'
            //服務器請求地址
            buildConfigField "String", "SERVER_URL", '"https://cloudxxxx22/a"'
            //一些常量
            buildConfigField "String", "company", '"SatayKing"'
            buildConfigField "String", "serial", '"xxxxx"'
            buildConfigField "int", "ENVIRONMENTInt", '2'
            */
        }
        minApi24 {
            dimension "api"
            minSdkVersion 24
            // To ensure the target device receives the version of the app with
            // the highest compatible API level, assign version codes in increasing
            // value with API level. To learn more about assigning version codes to
            // support app updates and uploading to Google Play, read Multiple APK Support
            versionCode 30000 + android.defaultConfig.versionCode
            versionNameSuffix "-minApi24"
        }

        demo {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".demo"
            versionNameSuffix "-demo"
        }
        full {
            dimension "version"
            applicationIdSuffix ".full"
            versionNameSuffix "-full"
        }
    }


   /* android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def buildType = variant.buildType.name
                //这里修改apk文件名,格式为 module_flavor-version-time-buildtype.apk
                def fileName = "Gsafety_${variant.productFlavors[0].name}-V${defaultConfig.versionName}-${getCurrentTime()}-${buildType}.apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }*/
    /*applicationVariants.all { variant ->//批量修改Apk名字
        variant.outputs.all { output ->
            def names = variant.flavorName[1]
            print(names)
            f (!variant.flavorName.isDebuggable()) {
                //获取签名的名字 variant.signingConfig.name
                //要被替换的源字符串
                def sourceFile = "-${variant.flavorName}-${variant.flavorName.name}"
                //替换的字符串
                def replaceFile = "_V${variant.versionName}_${variant.flavorName}_${variant.flavorName.name}_${getCurrentTime()}_${productFlavors()}"
                outputFileName = output.outputFile.name.replace(sourceFile, replaceFile);
                //遗留问题：如何获取当前module的name，如CodeBooke这个名字怎么获取到
            }
        }
    }*/
    variantFilter { variant ->
        def names = variant.flavors*.name
        print("->"+names)
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if (names.contains("minApi21") && names.contains("baidu")) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
            print("no ->"+names)
        }
    }

    /*Gradle3.3 以上的方法*/
    applicationVariants.all { variant ->
        if (variant.buildType.name != "debug") {
            variant.getPackageApplicationProvider().get().outputDirectory = new File(project.rootDir.absolutePath + "/apk")
        }

        variant.getPackageApplicationProvider().get().outputScope.apkDatas.forEach { apkData ->
            apkData.outputFileName = ((project.name != "app") ? project.name : rootProject.name) + "-" +
                    variant.versionName + "_" +
                    variant.flavorName + "_" +
                    variant.buildType.name + "_" +
                    ".apk"
            print("data->"+apkData.outputFileName)
        }
    }

}

dependencies {
    //不同产品引入不同的包
    /*ACompile "com.android.support:appcompat-v7:26.+"
    BCompile "com.android.support.constraint:constraint-layout:1.0.2"*/
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

def getCurrentTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}
